---
import type { CollectionEntry } from 'astro:content';
import Navbar from "../components/Navbar.astro";
import Foot from "../components/Foot.astro";
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;

---


<html lang="en">
	<head>

		<!-- Google tag (gtag.js) -->
<script is:inline async src="https://www.googletagmanager.com/gtag/js?id=G-FGX3M398L2"></script>
<script is:inline>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FGX3M398L2');
  gtag('config', 'G-YXJ0K3DZ94', {'cookie_prefix': 'omni'});
  gtag('config', 'G-CMHZP0XZLP', {'cookie_prefix': 'omni'});

  gtag('event', 'testing', {'parameter_a':'value a' })
  
</script>

		<BaseHead title={title} description={description} />
		<meta charset="UTF-8" />
		<meta name="description" content="Web B description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/nuhsfav.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link href="/global-web.css" id="dynamic-style" rel="stylesheet">
		
	</head>


	<body>
		<header>
			<Navbar/>

		</header>
		<main>
			<article>
				<div class="max-w-3xl py-6 mx-auto ">
					<div class="overflow-hidden rounded-lg">
						<div class="px-4 py-5 sm:p-6">
						  <!-- Content goes here -->
						  {heroImage && <img src={heroImage} alt="" class=" rounded-xl" />}
						</div>
					  </div>
					  
				</div>
				<div class="px-4 mx-auto prose lg:prose-xl">
					<div class="">
						<div class="">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
				
					</div>
					<slot />
				</div>
			</article>

		</main>
		<Foot />
	</body>
</html>

<script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        const params = new URLSearchParams(window.location.search);
        const theme = params.get('theme'); // Assuming the URL parameter is named 'theme'
        if (theme) {
        document.querySelectorAll('a').forEach(function(link) {
            const url = new URL(link.href, window.location.origin);
            url.searchParams.set('theme', theme); // Append or overwrite the 'theme' parameter
            link.href = url.toString();
        });
    }


        // Define theme styles as objects or strings
        const themes = {
            app: `
            h1, h2, h3, h4, h5, h6 {
  color: #1e3a8a !important; /* text-blue-900 */
}

p {
  color: #6b7280 !important; /* text-gray-500 */
  font-size: 1.5rem !important; /* text-2xl, assuming the base font-size is 16px */
}

#menu, #footer, #articles, #cta-links {
  display: none !important; /* hidden */
}

.button-blue {
  background-color: #1e40af !important; /* bg-blue-800 */
}

            `,
            mobile: `
                body { background-color: #fff; color: #000; }
                a { color: #007bff; }
                #menu, #footer {
  display: none !important; /* hidden */
}
                .theme-specific { /* Additional light theme styles */ }
            `
        };
    
        // Check if the theme parameter exists and is defined in the themes object
        if (theme && themes[theme]) {
            const styleElement = document.createElement('style');
            document.head.appendChild(styleElement);
            styleElement.textContent = themes[theme];
        }
        

        
    });

    
    </script>


<!-- <script>

	document.addEventListener('DOMContentLoaded', () => {
		const params = new URLSearchParams(window.location.search);
		const theme = params.get('theme'); // Assuming the URL parameter is named 'theme'
		
		let themeCssPath = '/global-web.css'; // Default CSS path
		if (theme === 'app') {
			themeCssPath = '/app.css';
			console.log('app')
		} else if (theme === 'mobile-web') {
			themeCssPath = '/mobile-web.css';
			console.log('mobile-web')
		}
		
		const styleElement = document.getElementById('dynamic-style');
    if(styleElement instanceof HTMLLinkElement) {
        styleElement.href = themeCssPath;
    }
	});
	
	</script> -->